// ========================================
// TESTE COMPLETO DO COUPON SERVICE
// Validar funcionalidades de cupons e cr√©ditos
// ========================================

const { Pool } = require('pg');
const CouponService = require('../src/services/coupon.service.ts').default;

console.log('üé´ TESTE COMPLETO DO COUPON SERVICE');
console.log('==================================');

async function testCouponService() {
  try {
    // Conectar ao banco
    const db = new Pool({
      connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/marketbot'
    });

    console.log('üìã 1. Testando CouponService...');
    const couponService = CouponService.getInstance();
    
    // 2. Criar usu√°rio de teste se necess√°rio
    console.log('üë§ 2. Criando usu√°rio de teste...');
    const userResult = await db.query(`
      INSERT INTO users (email, password_hash, user_type) 
      VALUES ('test@coupon.com', 'hash123', 'TRADER')
      ON CONFLICT (email) DO UPDATE SET updated_at = NOW()
      RETURNING id
    `);
    const testUserId = userResult.rows[0].id;
    console.log(`‚úÖ Usu√°rio de teste: ID ${testUserId}`);

    // 3. Testar cria√ß√£o de cupom
    console.log('üé´ 3. Testando cria√ß√£o de cupom...');
    const newCoupon = await couponService.createCoupon({
      code: couponService.generateCouponCode('TEST', 6),
      type: 'PERCENTAGE',
      value: 10,
      description: 'Desconto de 10% para testes',
      max_uses: 100,
      valid_from: new Date(),
      valid_until: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias
      min_order_value: 50,
      max_discount: 25,
      user_type: 'TRADER',
      created_by: testUserId
    });
    console.log(`‚úÖ Cupom criado: ${newCoupon.code}`);

    // 4. Testar valida√ß√£o de cupom
    console.log('‚úîÔ∏è 4. Testando valida√ß√£o de cupom...');
    const validation = await couponService.validateCoupon(
      newCoupon.code,
      testUserId,
      100, // valor do pedido
      'TRADER'
    );
    console.log(`‚úÖ Valida√ß√£o: ${validation.valid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
    if (validation.valid) {
      console.log(`üí∞ Desconto calculado: $${validation.discount_amount}`);
    }

    // 5. Testar aplica√ß√£o de cupom
    console.log('üéØ 5. Testando aplica√ß√£o de cupom...');
    const application = await couponService.applyCoupon(
      newCoupon.code,
      testUserId,
      100,
      'TRADER',
      '127.0.0.1',
      'Test-Agent'
    );
    console.log(`‚úÖ Aplica√ß√£o: ${application.success ? 'SUCESSO' : 'FALHA'}`);
    if (application.success) {
      console.log(`üí∞ Desconto aplicado: $${application.discount_applied}`);
    }

    // 6. Testar cupom de cr√©dito
    console.log('üíé 6. Testando cupom de cr√©dito...');
    const creditCoupon = await couponService.createCoupon({
      code: couponService.generateCouponCode('CREDIT', 6),
      type: 'CREDIT',
      value: 25,
      description: 'Cr√©dito de $25 para testes',
      max_uses: 50,
      valid_from: new Date(),
      valid_until: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      created_by: testUserId
    });
    console.log(`‚úÖ Cupom de cr√©dito criado: ${creditCoupon.code}`);

    // Aplicar cupom de cr√©dito
    const creditApplication = await couponService.applyCoupon(
      creditCoupon.code,
      testUserId,
      0, // sem valor de pedido para cr√©dito
      'TRADER'
    );
    console.log(`‚úÖ Cr√©dito aplicado: ${creditApplication.success ? 'SUCESSO' : 'FALHA'}`);

    // 7. Verificar saldo do usu√°rio
    console.log('üí∞ 7. Verificando saldo do usu√°rio...');
    const balanceResult = await db.query(
      'SELECT balance FROM users WHERE id = $1',
      [testUserId]
    );
    const userBalance = balanceResult.rows[0]?.balance || 0;
    console.log(`‚úÖ Saldo atual do usu√°rio: $${userBalance}`);

    // 8. Testar listagem de cupons
    console.log('üìã 8. Testando listagem de cupons...');
    const coupons = await couponService.listCoupons(10, 0);
    console.log(`‚úÖ ${coupons.length} cupons encontrados`);

    // 9. Testar busca por c√≥digo
    console.log('üîç 9. Testando busca por c√≥digo...');
    const foundCoupon = await couponService.getCouponByCode(newCoupon.code);
    console.log(`‚úÖ Cupom encontrado: ${foundCoupon ? 'SIM' : 'N√ÉO'}`);
    if (foundCoupon) {
      console.log(`üìä Usos atuais: ${foundCoupon.current_uses}/${foundCoupon.max_uses || 'unlimited'}`);
    }

    // 10. Testar cleanup de cupons expirados
    console.log('üßπ 10. Testando cleanup de cupons...');
    await couponService.cleanup();

    // Cleanup final
    console.log('üóëÔ∏è Limpeza final dos dados de teste...');
    await db.query('DELETE FROM coupon_usage WHERE user_id = $1', [testUserId]);
    await db.query('DELETE FROM coupons WHERE created_by = $1', [testUserId]);
    await db.query('DELETE FROM users WHERE id = $1', [testUserId]);

    await db.end();

    console.log('\nüéâ ======= RELAT√ìRIO COUPON SERVICE =======');
    console.log('‚úÖ CouponService inicializado');
    console.log('‚úÖ Cria√ß√£o de cupons funcionando');
    console.log('‚úÖ Valida√ß√£o de cupons funcionando');
    console.log('‚úÖ Aplica√ß√£o de cupons funcionando');
    console.log('‚úÖ Cupons de cr√©dito funcionando');
    console.log('‚úÖ Sistema de saldo funcionando');
    console.log('‚úÖ Listagem e busca funcionando');
    console.log('‚úÖ Cleanup automatizado funcionando');
    console.log('üéØ COUPON SERVICE 100% FUNCIONAL!');
    console.log('=======================================');

  } catch (error) {
    console.error('‚ùå Erro no teste do CouponService:', error);
    throw error;
  }
}

// Executar teste
if (require.main === module) {
  testCouponService()
    .then(() => {
      console.log('‚úÖ Teste do CouponService conclu√≠do com sucesso!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Falha no teste do CouponService:', error);
      process.exit(1);
    });
}

module.exports = { testCouponService };
