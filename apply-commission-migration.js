// ========================================
// APLICAR MIGRA√á√ÉO - SISTEMA DE COMISSIONAMENTO
// Script para aplicar a migra√ß√£o 009 do sistema de comiss√µes
// ========================================

const { Pool } = require('pg');
const fs = require('fs').promises;
const path = require('path');

// Configura√ß√£o do banco (Railway PostgreSQL)
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:DaOOFECebcBgfcDfafADBgGFeEFbbeGD@autorack.proxy.rlwy.net:26714/railway',
  ssl: {
    rejectUnauthorized: false
  }
});

async function applyCommissionMigration() {
  const client = await pool.connect();
  
  try {
    console.log('üöÄ Iniciando migra√ß√£o do sistema de comissionamento...\n');

    // Verificar se a migra√ß√£o j√° foi aplicada
    const existingMigration = await client.query(
      "SELECT * FROM migration_log WHERE version = '009'"
    );

    if (existingMigration.rows.length > 0) {
      console.log('‚ö†Ô∏è Migra√ß√£o 009 j√° foi aplicada anteriormente');
      console.log('Data da aplica√ß√£o:', existingMigration.rows[0].executed_at);
      return;
    }

    // Ler o arquivo de migra√ß√£o
    const migrationPath = path.join(__dirname, 'migrations', '009_commission_system.sql');
    const migrationSQL = await fs.readFile(migrationPath, 'utf8');

    console.log('üìÑ Arquivo de migra√ß√£o carregado');
    console.log('üìä Executando migra√ß√£o...');

    // Executar a migra√ß√£o dentro de uma transa√ß√£o
    await client.query('BEGIN');

    try {
      await client.query(migrationSQL);
      await client.query('COMMIT');
      
      console.log('\n‚úÖ Migra√ß√£o aplicada com sucesso!');
      
      // Verificar estruturas criadas
      console.log('\nüîç Verificando estruturas criadas:');
      
      // Verificar tabelas
      const tables = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('commission_payments', 'affiliates', 'referrals')
        ORDER BY table_name
      `);
      
      console.log('üìã Tabelas criadas:');
      tables.rows.forEach(row => {
        console.log(`   ‚úì ${row.table_name}`);
      });

      // Verificar views
      const views = await client.query(`
        SELECT table_name 
        FROM information_schema.views 
        WHERE table_schema = 'public' 
        AND table_name LIKE '%commission%' OR table_name LIKE '%affiliate%'
        ORDER BY table_name
      `);
      
      console.log('üëÅÔ∏è Views criadas:');
      views.rows.forEach(row => {
        console.log(`   ‚úì ${row.table_name}`);
      });

      // Verificar fun√ß√µes
      const functions = await client.query(`
        SELECT routine_name 
        FROM information_schema.routines 
        WHERE routine_schema = 'public' 
        AND routine_name LIKE '%affiliate%' OR routine_name LIKE '%commission%'
        ORDER BY routine_name
      `);
      
      console.log('‚öôÔ∏è Fun√ß√µes criadas:');
      functions.rows.forEach(row => {
        console.log(`   ‚úì ${row.routine_name}`);
      });

      // Verificar configura√ß√µes inseridas
      const settings = await client.query(`
        SELECT key, value, description 
        FROM system_settings 
        WHERE key LIKE 'commission%'
        ORDER BY key
      `);
      
      console.log('‚öôÔ∏è Configura√ß√µes do sistema:');
      settings.rows.forEach(row => {
        console.log(`   ‚úì ${row.key}: ${row.value}`);
      });

      // Testar fun√ß√£o de gera√ß√£o de c√≥digo de afiliado
      const testCode = await client.query('SELECT generate_affiliate_code() as code');
      console.log(`üß™ Teste gera√ß√£o c√≥digo afiliado: ${testCode.rows[0].code}`);

      console.log('\nüéâ Sistema de comissionamento configurado e pronto!');
      console.log('\nüìã Recursos dispon√≠veis:');
      console.log('   ‚Ä¢ Processamento autom√°tico de comiss√µes por posi√ß√£o');
      console.log('   ‚Ä¢ Sistema de tiers para afiliados (NORMAL/VIP)');
      console.log('   ‚Ä¢ C√°lculo autom√°tico de taxas de convers√£o USD‚ÜíBRL');
      console.log('   ‚Ä¢ Relat√≥rios detalhados de performance');
      console.log('   ‚Ä¢ Gest√£o completa de indica√ß√µes e refer√™ncias');
      console.log('   ‚Ä¢ Views otimizadas para consultas');

    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    }

  } catch (error) {
    console.error('\n‚ùå Erro ao aplicar migra√ß√£o:');
    console.error('Detalhes:', error.message);
    
    if (error.code) {
      console.error('C√≥digo do erro:', error.code);
    }
    
    process.exit(1);
  } finally {
    client.release();
    await pool.end();
  }
}

// Executar migra√ß√£o
applyCommissionMigration().catch(console.error);
