// ========================================
// MARKETBOT - SCRIPT EXECUTOR PRINCIPAL
// Valida√ß√£o e Corre√ß√£o Completa para 100%
// ========================================

const { execSync } = require('child_process');
const fs = require('fs');

class MarketBotCompleteSetup {
  constructor() {
    this.startTime = Date.now();
  }

  log(message) {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`[${timestamp}] ${message}`);
  }

  async run() {
    console.log('üöÄ MARKETBOT - SETUP COMPLETO PARA 100%');
    console.log('======================================');
    console.log('Executando valida√ß√£o e corre√ß√µes autom√°ticas');
    console.log('======================================\n');

    try {
      // 1. Executar corre√ß√µes autom√°ticas primeiro
      this.log('üîß FASE 1: Aplicando corre√ß√µes autom√°ticas...');
      console.log('\n' + '='.repeat(60));
      execSync('node fix-sprints-1-5-auto.js', { stdio: 'inherit' });
      
      this.log('‚úÖ Corre√ß√µes autom√°ticas conclu√≠das');
      
      // 2. Aguardar um pouco para estabilizar
      this.log('‚è≥ Aguardando estabiliza√ß√£o...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // 3. Executar valida√ß√£o completa
      this.log('üîç FASE 2: Executando valida√ß√£o completa...');
      console.log('\n' + '='.repeat(60));
      execSync('node validate-sprints-1-5-complete.js', { stdio: 'inherit' });
      
      this.log('‚úÖ Valida√ß√£o completa conclu√≠da');
      
      // 4. Relat√≥rio final
      this.generateSummaryReport();
      
    } catch (error) {
      console.error('\n‚ùå Erro durante execu√ß√£o:', error.message);
      this.log('‚ùå Processo interrompido devido a erro');
    }
  }

  generateSummaryReport() {
    const endTime = Date.now();
    const duration = Math.round((endTime - this.startTime) / 1000);
    
    console.log('\n' + '='.repeat(60));
    console.log('üéØ RELAT√ìRIO FINAL - SETUP COMPLETO MARKETBOT');
    console.log('='.repeat(60));
    
    console.log(`‚è±Ô∏è  Tempo total de execu√ß√£o: ${duration} segundos`);
    console.log(`üìÖ Data/Hora: ${new Date().toLocaleString()}`);
    
    console.log('\nüìã PROCESSOS EXECUTADOS:');
    console.log('1. ‚úÖ Corre√ß√µes autom√°ticas aplicadas');
    console.log('2. ‚úÖ Valida√ß√£o completa executada');
    console.log('3. ‚úÖ Relat√≥rios gerados');
    
    console.log('\nüéâ PR√ìXIMOS PASSOS:');
    console.log('1. Verificar o relat√≥rio de valida√ß√£o acima');
    console.log('2. Se algum item n√£o estiver 100%, executar corre√ß√µes manuais');
    console.log('3. Testar endpoints via Postman/Insomnia');
    console.log('4. Executar testes de carga se necess√°rio');
    
    console.log('\nüöÄ COMANDOS √öTEIS:');
    console.log('‚Ä¢ Validar novamente: node validate-sprints-1-5-complete.js');
    console.log('‚Ä¢ Aplicar corre√ß√µes: node fix-sprints-1-5-auto.js');
    console.log('‚Ä¢ Testar API: npm test');
    console.log('‚Ä¢ Iniciar servidor: npm start');
    
    console.log('\n' + '='.repeat(60));
    console.log('‚ú® MARKETBOT SETUP COMPLETO - VERIFIQUE OS RESULTADOS ACIMA');
    console.log('='.repeat(60));
  }
}

// ========================================
// EXECU√á√ÉO
// ========================================

const setup = new MarketBotCompleteSetup();
setup.run().catch(console.error);

module.exports = MarketBotCompleteSetup;
